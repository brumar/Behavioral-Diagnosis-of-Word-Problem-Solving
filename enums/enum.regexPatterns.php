<?php

// Enum: type d'operations
abstract class RegexPatterns
{
	const	completeOperation = "/\d+\s*[+*-\/]\s*\d+\s*=\s*\d+/"; // take all the formulas
	const   EndresultAfterFormulas="/[^=\d]+(\d+)*[^=\d]*$/"; // do not control for formula existence and take the last isolated number
	const   LastNumberAfterEqualSign="/=\s*(\d+)[^=]*$/";
	const 	isolatedNumbersAfterFormulas="/(?:\d+\s*[+*-\/]\s*\d+\s*=\s*\d*[^\d]*)*((\d+)[^\d])+/"; //g option (multi match)
	const	number = "/\d+/";
	
	/*
	 *  **************complete operation (generated by regex101.com) *************
	 * 
	\d+ match a digit [0-9]
		Quantifier: + Between one and unlimited times, as many times as possible, giving back as needed [greedy]
	\s* match any white space character [\r\n\t\f ]
		Quantifier: * Between zero and unlimited times, as many times as possible, giving back as needed [greedy]
	[+*-\/] match a single character present in the list below
		+ the literal character +
		*-\/ a single character in the range between the following two characters
		* the literal character *
		\/ the literal character /
	\s* match any white space character [\r\n\t\f ]
		Quantifier: * Between zero and unlimited times, as many times as possible, giving back as needed [greedy]
	\d+ match a digit [0-9]
		Quantifier: + Between one and unlimited times, as many times as possible, giving back as needed [greedy]
	\s* match any white space character [\r\n\t\f ]
		Quantifier: * Between zero and unlimited times, as many times as possible, giving back as needed [greedy]
	= matches the character = literally
	\s* match any white space character [\r\n\t\f ]
		Quantifier: * Between zero and unlimited times, as many times as possible, giving back as needed [greedy]
	\d+ match a digit [0-9]
		Quantifier: + Between one and unlimited times, as many times as possible, giving back as needed [greedy]
	 * 
	 * 
	 * 
	 * 

	 */

}

?>
